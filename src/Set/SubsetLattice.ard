\import Data.Array
\import Function
\import Logic
\import Order.HeytingAlgebra
\import Order.Lattice
\import Paths.Meta

\instance SubsetLattice (A : \Type) : HeytingAlgebra.Distributive (A -> \Prop)
  | <= S T => \Pi {x : A} -> S x -> T x
  | <=-refl => id
  | <=-transitive S<=T T<=U Sx => T<=U (S<=T Sx)
  | <=-antisymmetric S<=T T<=S => exts (\lam _ => propExt S<=T T<=S)
  | meet S T x => \Sigma (S x) (T x)
  | meet-left => __.1
  | meet-right => __.2
  | meet-univ S<=T S<=U Sx => (S<=T Sx, S<=U Sx)
  | join S T x => S x || T x
  | join-left => byLeft
  | join-right => byRight
  | join-univ S<=T U<=T => \case \elim __ \with {
    | byLeft Sx => S<=T Sx
    | byRight Ux => U<=T Ux
  }
  | bottom _ => Empty
  | bottom-univ => absurd
  | ldistr>= (Sx, Tx|Ux) => ||.map (Sx, __) (Sx, __) Tx|Ux
  | --> S T x => S x -> T x
  | rel-eval (Sx, Sx->Tx) => Sx->Tx Sx
  | rel-univ ST<=U Tx Sx => ST<=U (Sx, Tx)

\lemma fin-meet-index {A : \Type} {n : Nat} {p : Array (A -> \Prop) n} {x : A}
                      (q : fold {A -> \Prop} (âˆ§) Bounded.top p x) (i : Fin n)
  : p i x \elim n, i
  | suc _, 0 => q.1
  | suc _, suc _ => fin-meet-index q.2 _