\import Algebra.Group
\import Algebra.Monoid
\import Algebra.Monoid.Action
\import Algebra.Pointed
\import Logic
\import Paths (inv)
\import Paths.Meta
\import Relation.Equivalence

\class GroupAction \extends MonoidAction {
  \override C : Group

  \lemma rinv-c* {a : C} {x : E} : a c* inverse a c* x = x => rewrite (inv *-c*, inverse-right) ide-c*

  \lemma linv-c* {a : C} {x : E} : inverse a c* a c* x = x => rewrite (inv *-c*, inverse-left) ide-c*

  \lemma inv-*-c* {a b : C} {x : E} : inverse (a * b) c* x = inverse b c* inverse a c* x =>
    rewrite (Group.inverse_* _ _) *-c*

  \func Orbit (x y : E) => \Sigma (a : C) (a c* x = y)

  \func SameOrbit : Equivalence E \cowith
    | ~ x y => TruncP (Orbit x y)
    | ~-reflexive => inP (ide, ide-c*)
    | ~-symmetric (inP (g, orbit)) => inP (inverse g, rewrite (inv orbit) GroupAction.linv-c*)
    | ~-transitive (inP (g, orbit)) (inP (h, orbit')) => inP (h * g, rewrite (*-c*, orbit) orbit')
}