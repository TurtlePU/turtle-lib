\import Category.Functor
\import Data.Bool
\import Multiplicity.Multiplicity
\import Order.Lattice
\import Set.Category

\data Pair (A B : \Set)
  | \infix 6 :' A B

\instance PairFunctor {A : \Set} : Functor SetCat SetCat (Pair A)
  | Func => {?}
  | Func-id => {?}
  | Func-o => {?}

\data Type (V : \Set)
  | Unit V
  | Arrow (from : Type V) V (to : Type V)
  | Forall (top : Multiplicity) (Type (Pair Bool V)) V

\func getV {V : \Set} (t : Type V) : V \elim t {
  | Unit v => v
  | Arrow _ v _ => v
  | Forall _ _ v => v
}

\instance TypeFunctor : Functor SetCat SetCat Type
  | Func => {?}
  | Func-id => {?}
  | Func-o => {?}

\func shrink {V : JoinSemilattice} (v : V) (t : Type (Pair Bool V)) : Type V => Func {TypeFunctor} (shrink-one v) t
  \where {
    \func shrink-one {V : JoinSemilattice} (v : V) (o : Pair Bool V) : V \elim o
      | :' true a => v âˆ¨ a
      | :' false b => b
  }