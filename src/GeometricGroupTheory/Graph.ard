\import Algebra.Group.Action
\import Algebra.Involutive
\import Paths
\import Paths.Meta
\import Set

\class Graph (V : BaseSet) \extends Involutive {
  | from : E -> V
  | to : E -> V
  | from-inv {e : E} : from (invert e) = to e

  \lemma to-inv {e : E} : to (invert e) = from e =>
    rewrite (inv from-inv, invert-inv) idp

  \func E' (u v : V) => \Sigma (e : E) (from e = u) (to e = v)

  \func invert' {u v : V} : E' u v -> E' v u =>
    \lam (e, fe=u, te=v) => (invert e, from-inv *> te=v, to-inv *> fe=u)

  \lemma invert'_isInv {u v : V} {e : E' u v} : invert' (invert' e) = e => ext (invert-inv _)
}

\class ActionOnGraph \extends GroupAction, Graph {
  \override V : GroupAction { | C => C }
  | invert-c* {g : C} {e : E} : invert (g c* e) = g c* invert e
  | from-c* {g : C} {e : E} : from (g c* e) = g c* {V} from e

  \lemma to-c* {g : C} {e : E} : to (g c* e) = g c* {V} to e =>
    rewrite (inv from-inv, invert-c*, from-c*, from-inv) idp
}