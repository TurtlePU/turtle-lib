\import Data.Array
\import Function
\import Logic
\import Logic.Meta
\import Order.HeytingAlgebra
\import Order.Lattice
\import Order.PartialOrder
\import Paths.Meta

\record Filter (L : Bounded.MeetSemilattice) (\coerce F : L -> \Prop) {
  | filter-top : F L.top
  | filter-meet {a b : L} : F a -> F b -> F (a ∧ b)
  | filter-up {a b : L} : a <= b -> F a -> F b

  \lemma filter-fin-meet {n : Nat} {a : Array L n} (p : ∀ (i : Fin n) (F (a i))) : F (fold (∧) L.top a) \elim n, a
    | 0, nil => filter-top
    | suc _, _ :: _ => filter-meet (p 0) (filter-fin-meet (\lam i => p (suc i)))
}

\instance FilterLattice (L : Bounded.MeetSemilattice) : Bounded.MeetSemilattice (Filter L)
  | <= F G => \Pi {x : L} -> F x -> G x
  | <=-refl => id
  | <=-transitive F<=G G<=H Fx => G<=H (F<=G Fx)
  | <=-antisymmetric F<=G G<=F => exts (\lam e => propExt F<=G G<=F)
  | meet G H => \new Filter {
    | F x => \Sigma (G x) (H x)
    | filter-top => (filter-top, filter-top)
    | filter-meet (Ga, Ha) (Gb, Hb) => (filter-meet Ga Gb, filter-meet Ha Hb)
    | filter-up a<=b (Ga, Ha) => (filter-up a<=b Ga, filter-up a<=b Ha)
  }
  | meet-left => __.1
  | meet-right => __.2
  | meet-univ H<=F H<=G Hx => (H<=F Hx, H<=G Hx)
  | top => \new Filter {
    | F _ => \Sigma
    | filter-top => ()
    | filter-meet _ _ => ()
    | filter-up _ _ => ()
  }
  | top-univ _ => ()

\lemma hasBottom=>hasAll {L : Bounded.Lattice} {F : Filter L} (bot : F L.bottom) (x : L) : F x =>
  filter-up Bounded.bottom-univ bot

\lemma hasBottom=>isTrivial {L : Bounded.Lattice} {F : Filter L} (bot : F L.bottom) : F = Bounded.top =>
  exts (\lam x => propExt (\lam _ => ()) (\lam _ => hasBottom=>hasAll bot _))

\lemma filter-rel {L : HeytingAlgebra} {F : Filter L} {x y : L} : F (x --> y) -> F x -> F y =>
  \lam fxy fx => filter-up rel-eval (filter-meet fx fxy)