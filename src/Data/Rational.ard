\import Algebra.Action
\import Algebra.Domain
\import Algebra.Field
\import Algebra.Group (AddGroup)
\import Algebra.Group.Omega
\import Algebra.Meta
\import Algebra.Monoid
\import Algebra.Ordered
\import Algebra.Ring.Omega
\import Algebra.Semiring
\import Data.Fraction
\import Logic
\import Meta
\import Order.LinearOrder
\import Paths
\import Paths.Meta
\import Relation.Equivalence
\import Set
\open AddGroup (#0, #0-zro)

\func nonZeroAction (D : IntegralDomain) : RingedAction D \cowith
  | Ring => D
  | C => D.nonZeroMonoid
  | c* (c, _) x => c * x
  | c*-*-left => *-assoc
  | c*-*-right => equation
  | ide-c* => ide-left
  | *-c* => *-assoc

\lemma apartNonZero {D : IntegralDomain} {x : D} (x#0 : x `#0) : x /= 0 =>
  \lam x=0 => D.#0-zro (rewriteI x=0 x#0)

\func Rational (D : IntegralDomain) => Fraction (nonZeroAction D)
  \where {
    \instance Proportion (D : IntegralDomain) : Equivalence (\Sigma D D.nonZeroMonoid)
      | ~ (p, (q, _)) (p', (q', _)) => q' * p = q * p'
      | ~-reflexive => idp
      | ~-symmetric => inv
      | ~-transitive {x} {(_, (q, q#0))} {z} x~y y~z => run {
        D.nonZero-cancel-left (apartNonZero q#0),
        equation *> pmap (z.2.1 *) x~y *> __,
        equation *> pmap (x.2.1 *) y~z *> equation
      }

    \func toQuotient {D : IntegralDomain} (r : Rational D) : Quotient (~ {Proportion D}) \elim r
      | / p (q, q#0) => in~ (p, (q, q#0))
      | reduce => path (~-equiv _ _ equation)

    \lemma reduce' {D : IntegralDomain} (r : D.nonZeroMonoid) {p : D} {q : D.nonZeroMonoid}
      : (r c* {nonZeroAction D} p) / (r * {D.nonZeroMonoid} q) = {Rational D} p / q => path reduce

    \func fromQuotient {D : IntegralDomain} (q : Quotient (~ {Proportion D})) : Rational D \elim q
      | in~ (p, (q, q#0)) => p / (q, q#0)
      | ~-equiv x y r =>
        inv (reduce' y.2) *>
        pmap (__ / {D.nonZeroMonoid} {nonZeroAction D} _) r *>
        pmap2 (/) equation *-comm *> reduce' x.2

    \lemma eq {D : IntegralDomain} {p p' : D} {q q' : D.nonZeroMonoid} (prf : (p, q) ~ (p', q'))
      : p / q = {Rational D} p' / q' => pmap fromQuotient (path (~-equiv (p, q) (p', q') prf))

    \lemma prop {D : IntegralDomain} {p p' : D} {q q' : D.nonZeroMonoid} (prf : p / q = {Rational D} p' / q')
      : (p, q) ~ {Proportion D} (p', q') =>
      Quotient.equalityEquiv (Proportion D) {(p, q)} {(p', q')} (pmap toQuotient prf)

    \lemma =0 {D : IntegralDomain} {p : D} {q : D.nonZeroMonoid} (prf : p = 0)
      : p / q = {FractionRing (nonZeroAction D)} 0 => rewrite prf FractionAbGroup.=0
  }

\instance RationalDomain (D : IntegralDomain) : IntegralDomain (Rational D)
  | Ring => FractionRing _
  | #0 => \case \elim __ \with {
    | / p _ => p `#0
    | reduce {_} {_} {r} => propExt D.#0-*-right (\lam p#0 => apartZeroProduct r.2 p#0)
  }
  | #0-zro => D.#0-zro
  | #0-+ (/ p q) (/ p' q') +#0 => ||.map D.#0-*-right D.#0-*-right (D.#0-+ _ _ +#0)
  | #0-tight {/ _ _} x/#0 => Rational.=0 (D.#0-tight x/#0)
  | #0-*-left {/ _ _} {/ _ _} => D.#0-*-left
  | zro#ide => D.zro#ide
  | apartZeroProduct {/ _ _} {/ _ _} => D.apartZeroProduct
  | *-comm {/ _ _} {/ _ _} => pmap2 (/) *-comm *-comm

\instance RationalOrder (R : OrderedCRing) : OrderedCRing (Rational R)
  | CRing => RationalDomain R
  | isPos => \case \elim __ \with {
    | / p (q, _) => isPos (q * p)
    | reduce {p} {q} {r} =>
      pmap isPos (equation : r.1 * q.1 * (r.1 * p) = (q.1 * p) * (r.1 * r.1)) *>
      propExt (R.positive_*-cancel-left __ (sqPos r.2)) (positive_* __ (sqPos r.2))
  }
  | zro/>0 zro>0 => zro/>0 (transport isPos ide-left zro>0)
  | positive_+ {/ _ q} {/ _ q'} qp>0 q'p'>0 => run {
    rewrite ldistr,
    positive_+ (transport isPos equation (positive_* qp>0 (sqPos q'.2))),
    transport isPos equation (positive_* q'p'>0 (sqPos q.2))
  }
  | ide>zro => transport isPos equation ide>zro
  | <_+-comparison (/ p q) (/ p' q') +>0 =>
    \have prf : isPos ((q.1 * p) * (q'.1 * q'.1) + (q'.1 * p') * (q.1 * q.1)) => transport isPos equation +>0
    \in ||.map (R.positive_*-cancel-left __ (sqPos q'.2)) (R.positive_*-cancel-left __ (sqPos q.2))
        (<_+-comparison _ _ prf)
  | <_+-connectedness {/ _ q} qp/>0 -qp/>0 => run {
    Rational.=0,
    R.nonZero-left (apartNonZero q.2),
    <_+-connectedness qp/>0,
    transport (\lam x => Not (isPos x)) (R.negative_*-right _ _), -qp/>0
  }
  | positive_* {/ _ _} {/ _ _} qp>0 q'p'>0 => transport isPos equation (positive_* qp>0 q'p'>0)
  | positive_*-cancel {/ _ _} {/ _ _} *>0 => run {
    transport2 (\lam x y => _ || (\Sigma (isPos x) (isPos y)))
        (inv (R.negative_*-right _ _)) (inv (R.negative_*-right _ _)),
    positive_*-cancel {R},
    transport isPos equation *>0
  }
  \where {
    \lemma sqPos {R : OrderedRing} {x : R} (x#0 : x `#0) : isPos (x * x) =>
      \case R.#0=>eitherPosOrNeg x#0 \with {
        | byLeft x>0 => positive_* x>0 x>0
        | byRight x<0 => negative_* x<0 x<0
      }
  }

\instance RationalField (D : IntegralDomain.Dec) : DiscreteField (Rational D)
  | CRing => RationalDomain D
  | zro/=ide z=i => run {
    D.#0-zro, transportInv #0 __ D.zro#ide,
    inv zro_*-right *> Rational.prop z=i <* ide-left
  }
  | decideEq (/ p q) (/ p' q') => \case D.decideEq (q' c* {nonZeroAction D} p) (q c* {nonZeroAction D} p') \with {
    | yes x~y => yes (Rational.eq x~y)
    | no x/~y => no (\lam eq => x/~y (Rational.prop eq))
  }
  | finv => \case \elim __ \with {
    | / p (q, _) => \case D.decideEq p 0 \with {
      | yes _ => 0
      | no p/=0 => q / (p, D.nonEqualApart p/=0)
    }
    | reduce {_} {_} {r} => mcases \with {
      | yes _, yes _ => idp
      | yes rp=0, no p/=0 => run {
        absurd, p/=0,
        D.nonZero-cancel-left (apartNonZero r.2),
        rp=0 *> inv zro_*-right
      }
      | no rp/=0, yes p=0 => absurd (rp/=0 (rewrite p=0 OmegaGroup.c*-zro))
      | no _, no _ => path reduce
    }
  }
  | finv_zro => mcases \with {
    | yes _ => idp
    | no O/=O => absurd (O/=O idp)
  }
  | finv_inv {/ p _} x/=0 => cases (D.decideEq p 0) \with {
    | yes p=0 => run { absurd, x/=0, Rational.eq, rewrite p=0 equation }
    | no _ => Rational.eq equation
  }

\instance RationalOrderedField (R : OrderedCRing.Dec) : DiscreteOrderedField (Rational R)
  | DiscreteField => RationalField R
  | isPos => isPos {RationalOrder R}
  | zro/>0 => zro/>0 {RationalOrder R}
  | positive_+ => positive_+ {RationalOrder R}
  | ide>zro => ide>zro {RationalOrder R}
  | positive_* => positive_* {RationalOrder R}
  | #0=>eitherPosOrNeg {/ p q} i => \case R.trichotomy (q.1 * p) 0 \with {
    | less qp<0 => byRight (transport isPos equation qp<0)
    | equals qp=0 => run {
      absurd, #0-zro {RationalField R},
      transport Monoid.Inv __ i, Rational.=0,
      R.nonZero-cancel-left (apartNonZero q.2),
      qp=0 *> inv zro_*-right
    }
    | greater qp>0 => byLeft (transport isPos equation qp>0)
  }