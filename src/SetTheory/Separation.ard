\import Logic
\import Logic.Meta
\import Order.Lattice
\import Paths
\import Paths.Meta
\import SetTheory.Extensional

\class SeparationSetTheory \extends ExtensionalSetTheory, MeetSemilattice {
  | \infixl 5 !| (X : E) (Phi : E -> \Prop) : E
  | sep-sub {X : E} {Phi : E -> \Prop} : X !| Phi <= X
  | sep-meets {X : E} {Phi : E -> \Prop} : X !| Phi meets Phi
  | sep-prop {X : E} {Phi : E -> \Prop} {u : E} : u in X -> Phi u -> u in X !| Phi

  | ∧ X Y => X !| (`in Y)
  | meet-left => sep-sub
  | meet-right => sep-meets
  | meet-univ z<=x z<=y inZ => sep-prop (z<=x inZ) (z<=y inZ)

  \func \infixl 5 !- (X Y : E) => X !| (\lam u => Not (u in Y))

  \lemma sub-left {X Y : E} : X !- Y <= X => sep-sub

  \lemma sub-right {X Y u : E} : u in X !- Y -> Not (u in Y) => sep-meets

  \lemma sub-univ {X Y Z : E} : Z <= X -> Z meets (\lam u => Not (u in Y)) -> Z <= X !- Y => sep-under

  \func Meet {X : E} : nonEmpty X -> E => (Meet-impl __).1
    \where {
      \func Meet-impl {X : E} : nonEmpty X -> Meet0-data X =>
        TruncP.rec Meet0-data-isProp __ (\lam (x, inX) => (Meet0 inX, inP (x, inX, idp)))

      \func Meet0-data (X : E) => \Sigma (M : E) (∃ (x : E) (inX : x in X) (Meet0 inX = M))

      \lemma Meet0-data-isProp {X : E} (d d' : Meet0-data X) : d = d' \elim d, d'
        | (M, inP (x, x-inX, M0x=M)), (M', inP (y, y-inX, M0y=M')) => ext (inv M0x=M *> Meet0-ok x-inX y-inX *> M0y=M')

      \func Meet0 {X : E} {x : E} : x in X -> E => \lam _ => x !| (\lam u => X meets (u in))

      \func Meet0-ok {X x y : E} (x-inX : x in X) (y-inX : y in X) : Meet0 x-inX = Meet0 y-inX =>
        set-ext (\lam u => (\lam in-x-meet => sep-prop (sep-meets in-x-meet y-inX) (sep-meets in-x-meet),
                            \lam in-y-meet => sep-prop (sep-meets in-y-meet x-inX) (sep-meets in-y-meet)))
    }

  \lemma Meet-prop {X : E} (nX : nonEmpty X) {x : E} : x in X -> Meet nX <= x =>
    \lam x-inX u-inMeet => {?}

  \lemma Meet-univ {X : E} (nX : nonEmpty X) {M : E} : X meets (M <=) -> M <= Meet nX =>
    \lam XM u-inM => {?}

  \lemma sep-under {X Y : E} {Phi : E -> \Prop} : Y <= X -> Y meets Phi -> Y <= X !| Phi =>
    \lam Y<=X YPhi inY => sep-prop (Y<=X inY) (YPhi inY)

  \lemma sep-above {X Y : E} {Phi : E -> \Prop} : (\Pi {u : E} (u in X) (Phi u) -> u in Y) -> X !| Phi <= Y =>
    \lam YS in! => YS (sep-sub in!) (sep-meets in!)

  \lemma sep-univ {X Y : E} {Phi : E -> \Prop}
    : Y <= X -> Y meets Phi -> (\Pi {u : E} (u in X) (Phi u) -> u in Y) -> Y = X !| Phi =>
    \lam Y<=X YPhi YS => <=-antisymmetric (sep-under Y<=X YPhi) (sep-above YS)
}