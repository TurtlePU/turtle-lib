\import Logic
\import Logic.ConstructivePredicates.Eval
\import Logic.ConstructivePredicates.Formula
\import Logic.ConstructivePredicates.Signature
\import Logic.ConstructivePredicates.Structure
\import Logic.Meta
\import Meta
\import Order.Filter
\import Order.Filter.Disjoint
\import Order.Lattice
\import Paths
\import Paths.Meta
\import Relation.Equivalence
\import Relation.Quotient
\import Set.SubsetLattice

\record Product {I : \Type} {S : Signature} (A : I -> Structure S) (\coerce a : \Pi (i : I) -> A i)

\instance ProductStructure {I : \Type} {S : Signature} (A : I -> Structure S) : Structure S (Product A)
  | ! f a => \new Product _ (\lam i => f ! (\lam j => a j i))
  | ? p a => âˆ€ (i : I) (p ? (\lam j => a j i))

\lemma eval-i {I : \Type} {S : Signature} {A : I -> Structure S}
              {n : Nat} (v : Array (Product A) n) (T : Term S n)
              (i : I) : (v eval T) i = (\lam j => v j i) eval T
\elim T
  | var _ => idp
  | f :!: d => pmap (f !) (exts (\lam j => eval-i _ (d j) _))

\func IFilter (I : \Type) : \Type => Filter (SubsetLattice I)

\instance FilterEquivalence {I : \Type} (F : IFilter I) {S : Signature} (A : I -> Structure S)
: Equivalence (Product A)
  | ~ a b => F (\lam i => a i = b i)
  | ~-reflexive => transport F (ext (\lam i => propExt (\lam _ => idp) (\lam _ => absurd))) filter-top
  | ~-symmetric => transport F (ext (\lam i => propExt inv inv))
  | ~-transitive {a} {b} {c} aFb bFc =>
    filter-up (\lam {i} (p : \Sigma (a i = b i) (b i = c i)) => p.1 *> p.2) (filter-meet aFb bFc)

\func FilteredProduct {I : \Type} (F : IFilter I) {S : Signature} (A : I -> Structure S) =>
  Quotient (~ {FilterEquivalence F A})

\instance FilteredStructure {I : \Type} (F : IFilter I) {S : Signature} (A : I -> Structure S)
: Structure S (FilteredProduct F A)
  | ! f v => \case liftArray v \with {
    | in~ v => in~ (f ! v)
    | ~-equiv x y r => run {
      path, ~-equiv _ _, F.filter-up-flip (F.filter-fin-meet (\lam j i => x j i = y j i) r),
      \lam {i} p => (pmap (f !) (exts (fin-meet-index p)) : f ! (\lam j => x j i) = f ! (\lam j => y j i))
    }
  }
  | ? p v => \case liftArray v \with {
    | in~ v => F (\lam i => p ? (\lam j => v j i))
    | ~-equiv _ _ r => run {
      symExt {ArrayEquivalence _ _} r,
      \lam {x} {y} q (f : F (\lam i => p ? (\lam j => x j i))) =>
          F.filter-up-flip
              (filter-meet f (F.filter-fin-meet (\lam j i => x j i = y j i) q))
              {\lam i => p ? (\lam j => y j i)}
              (\lam (x?, x~y) => transport (p ?) (exts (fin-meet-index x~y)) x?)
    }
  }

\lemma eval-in~ {I : \Type} {F : IFilter I} {S : Signature} {A : I -> Structure S}
                {n : Nat} (v : Array (Product A) n) (T : Term S n)
  : lowerArray (in~ v) eval {_} {FilteredStructure F _} T = in~ (v eval T) \elim T
  | var _ => idp
  | f :!: d => pmap {Array _ _} (f !) {\lam j => lowerArray (in~ v) eval d j} (exts (\lam j => eval-in~ v (d j)))
    *> unfold (!) (rewrite (lowerArray.inverse (in~ (\lam j => v eval d j))) idp)

\func DFilter (I : \Type) : \Type => DisjointFilter (SubsetLattice I)

\lemma prop-in~ {I : \Type} {U : DFilter I} {S : Signature} {A : I -> Structure S}
                {n : Nat} (v : Array (Product A) n) (P : Formula S n)
  : lowerArray (in~ v) prop {_} {FilteredStructure U _} P = U (\lam i => (\lam j => v j i) prop P) \elim P
  | p :?: d => pmap {Array (FilteredProduct U A) _} (p ?) {\lam j => lowerArray (in~ v) eval d j}
      (exts (\lam j => eval-in~ v (d j))) *> rewrite (lowerArray.inverse (in~ (\lam j => v eval d j)))
      (pmap U (ext (\lam _ => pmap (p ?) (exts (\lam _ => eval-i _ _ _)))))
  | l :==: r => rewrite (eval-in~ v, eval-in~ v) {?}
  | Q :->: P => rewrite (prop-in~ v, prop-in~ v) (propExt (\lam _x => {?}) filter-rel)
  | _ :||: _ => rewrite (prop-in~ v, prop-in~ v) (propExt (\case __ \with {
    | byLeft a => filter-up (join-left {SubsetLattice I}) a
    | byRight b => filter-up (join-right {SubsetLattice I}) b
  }) filter-disjoint)
  | _ :&&: _ => rewrite (prop-in~ v, prop-in~ v) (propExt (\lam (a, b) => filter-meet a b)
      (\lam f => (filter-up (meet-left {SubsetLattice I}) f, filter-up (meet-right {SubsetLattice I}) f)))
  | forall P => {?}
  | exists P => {?}
  | _|_ => propExt absurd {?}