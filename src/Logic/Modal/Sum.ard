\import Function
\import Logic
\import Logic.Meta
\import Logic.Modal.Classes
\import Logic.Modal.Kripke
\import Logic.Modal.Kripke.Cat
\import Logic.Modal.Semantics
\import Logic.Modal.Syntax
\import Paths
\import Paths.Meta

\record FrameSum {I : \Type} (F : I -> Frame) (i : I) (f : F i)

\instance SumFrame {I : \Type} (F : I -> Frame) : Frame (FrameSum F)
  | R (i, fi) (j, fj) => âˆƒ (p : i = j) (transport (F __) p fi `R` fj)

\instance SumModel {I : \Type} {P : \Type} (F : I -> Model' P) : Model (FrameSum F) { | P => P }
  | Frame => SumFrame F
  | V p (_, f) => V p f

\lemma sum-sat {I : \Type} {P : \Type} {F : I -> Model' P} {i : I} {f : F i} {A : ML P}
  : (F i, f) |= A <-> (SumModel F, \new FrameSum _ i f) |= A \elim A
  | prop p => (id, id)
  | _|_ => (id, id)
  | h --> c => (\lam _x _x1 => sum-sat.1 (_x (sum-sat.2 _x1)),
                \lam _x _x1 => sum-sat.2 (_x (sum-sat.1 _x1)))
  | l :&&: r => (\lam (a, b) => (sum-sat.1 a, sum-sat.1 b), \lam (a, b) => (sum-sat.2 a, sum-sat.2 b))
  | l :||: r => (||.map sum-sat.1 sum-sat.1, ||.map sum-sat.2 sum-sat.2)
  | [_] A => (\lam _x y r => \case \elim y, \elim r \with {
    | (_, _), (inP (idp, r)) => sum-sat.1 (_x _ r)
  }, \lam _x _ r => sum-sat.2 (_x _ (inP (idp, r))))
  | <> A => (\lam (inP (y, r, v)) => inP (\new FrameSum _ i y, inP (idp, r), sum-sat.1 v),
             \lam (inP ((_, y), (inP (idp, r)), v)) => inP (y, r, sum-sat.2 v))

\func SumOf (C : Frame -> \Prop) : Frame => SumFrame {Index C} __.1
  \where \func Index (C : Frame -> \Prop) => \Sigma (F : Frame) (C F)

\lemma sum-reducer {P : \Type} (C : Frame -> \Prop) : Log {P} C = Log' (SumOf C) =>
  ext (\lam m => propExt
      (\lam _x V ((F, CF), x) => sum-lemma.1 (_x F CF (\lam p w => V p (\new FrameSum _ (F, CF) w)) x))
      (\lam _x F c V x => sum-lemma.2 (_x {?} {?})))
  \where \lemma sum-lemma {C : Frame -> \Prop} {P : \Type} {V : Valuation P (SumOf C)}
                          {F : SumOf.Index C} {x : F.1} {A : ML P}
    : (Model.from F.1 (\lam p w => V p (\new FrameSum _ F w)), x) |= A
      <-> (Model.from (SumOf C) V, \new FrameSum _ F x) |= A =>
      sum-sat {SumOf.Index C} {P} {\lam P => Model.from P.1 (\lam p w => V p (\new FrameSum _ P w))}